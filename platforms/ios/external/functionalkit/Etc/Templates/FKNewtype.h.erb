
/*
 Macros for creating instant types based on P*'s.
 Provides somewhat typesafe contructors and accessors.

 Your.h => NewTypeInterface(MyNewType, NSString, fieldName);
 Your.m => NewTypeImplementation(MyNewType, NSString, fieldName);
 
 Later...
 MyNewType *instance = [MyNewType fieldName:@"foobar"];
 [instance fieldName]; // @foobar
 
 */

#import "FKOption.h"

<%= (1..n).map { |i| "\#import \"FKP#{i}.h\"" }.join("\n")%>

// TODO make the contructors type check harder, so that 'id' can't be passed in

<% (1..n).each do |dim| %><% macro_arg_list = (1..dim).map { |i| ["wrappedtype#{i}", "acc#{i}"] }.flatten.join(', ') %>
// P<%= dim %> newtype
#define NewType<%= (dim == 1) ? "" : dim %>Interface(newtype, <%= macro_arg_list %>) \
@interface newtype : FKP<%= dim %> \
- (newtype *)initWith<%= (1..dim).map { |i| "_#{i}:(wrappedtype#{i} *)acc#{i}" }.join(' ') %>; \
+ (newtype *)<%= (1..dim).map { |i| "acc#{i}:(wrappedtype#{i} *)acc#{i}" }.join(' ') %>; \
<%= (1..dim).map { |i| "@property (readonly) wrappedtype#{i} *acc#{i}; \\" }.join("\n") %>
@end \
FKOption *NSArrayTo##newtype(NSArray *a); \
FKOption *NSDictionaryTo##newtype(NSDictionary *d); \

#define NewType<%= (dim == 1) ? "" : dim %>Implementation(newtype, <%= macro_arg_list %>) \
@implementation newtype \
\
<%= (1..dim).map do |i| "- (wrappedtype#{i} *)acc#{i} { return self._#{i}; } " end.join(' ') %> \
- (newtype *)initWith<%= (1..dim).map { |i| "_#{i}:(wrappedtype#{i} *)acc#{i}" }.join(' ') %> { return ((self = [super initWith<%= (1..dim).map { |i| "_#{i}:acc#{i}" }.join(' ') %>])); } \
+ (newtype *)<%= (1..dim).map { |i| "acc#{i}:(wrappedtype#{i} *)acc#{i}" }.join(' ') %> { return [[self alloc] initWith<%= (1..dim).map { |i| "_#{i}:acc#{i}" }.join(' ') %>] ; } \
@end \
\
FKOption *NSArrayTo##newtype(NSArray *arg) {\
	if (![arg isKindOfClass:[NSArray class]] || ([arg count] != <%= dim %>)) { \
		return [FKOption none]; \
	} \
<%= (1..dim).map { |i| "    id _#{i} = [arg objectAtIndex:#{i - 1}]; \\" }.join("\n") %>
    if ( <%= (1..dim).map { |i| "[_#{i} isKindOfClass:[wrappedtype#{i} class]]" }.join(' && ') %> ) { \
		return [FKOption some:[newtype <%= (1..dim).map { |i| "acc#{i}:_#{i}" }.join(' ') %>]]; \
	} \
	return [FKOption none]; \
} \
\
FKOption *NSDictionaryTo##newtype(NSDictionary *dict) {\
	if (![dict isKindOfClass:[NSDictionary class]]) { \
		return [FKOption none]; \
	} \
	NSArray *keys = @[<%= (1..dim).map { |i| "[NSString stringWithUTF8String:\#acc#{i}]" }.join(', ')%>];\
	NSArray *values = [dict objectsForKeys:keys notFoundMarker:[NSNull null]]; \
	FKOption *result = NSArrayTo##newtype(values); \
	return result; \
} \
<% end %>

// Do both. This won't work most of the time, duplicate symbols abound
#define NEWTYPE(newtype, wrappedtype, acc1) \
NewTypeInterface(newtype, wrappedtype, acc1) \
NewTypeImplementation(newtype, wrappedtype, acc1)

#define NEWTYPE2(newtype, wrappedtype1, acc1, wrappedtype2, acc2) \
NewType2Interface(newtype, wrappedtype1, acc1, wrappedtype2, acc2) \
NewType2Implementation(newtype, wrappedtype1, acc1, wrappedtype2, acc2)

#define NEWTYPE3(newtype, wrappedtype1, acc1, wrappedtype2, acc2, wrappedtype3, acc3) \
NewType3Interface(newtype, wrappedtype1, acc1, wrappedtype2, acc2, wrappedtype3, acc3) \
NewType3Implementation(newtype, wrappedtype1, acc1, wrappedtype2, acc2, wrappedtype3, acc3)

